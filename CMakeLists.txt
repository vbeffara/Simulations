cmake_minimum_required (VERSION 3.18)
project (Simulations CXX)

set (CMAKE_CXX_STANDARD 17)
set (CMAKE_CXX_FLAGS_DEBUG "-g")
set (CMAKE_CXX_FLAGS_RELEASE "-O3 -DNDEBUG")
set (CMAKE_EXPORT_COMPILE_COMMANDS 1)
set (CONAN_SYSTEM_INCLUDES ON)

include(${CMAKE_BINARY_DIR}/conanbuildinfo.cmake)
conan_basic_setup(NO_OUTPUT_DIRS KEEP_RPATHS)

if(NOT CMAKE_BUILD_TYPE)
  message(STATUS "Setting build type to 'Release' as none was specified.")
  set(CMAKE_BUILD_TYPE Release)
endif()

add_compile_options(-pedantic -Wall -Wextra -Wshadow -Wpedantic -Wold-style-cast -Wunused -Wconversion -Wsign-conversion -Wnull-dereference)

find_program(CCACHE ccache)
if(CCACHE)
  message(STATUS "Using ccache")
  set(CMAKE_CXX_COMPILER_LAUNCHER ${CCACHE})
endif()

include(CheckCXXCompilerFlag)
CHECK_CXX_COMPILER_FLAG(-fcoroutines-ts COROUTINES_TS)
if(${COROUTINES_TS})
    add_compile_options(-fcoroutines-ts)
else()
    CHECK_CXX_COMPILER_FLAG(-fcoroutines COROUTINES)
    if(${COROUTINES})
        add_compile_options(-fcoroutines -D__cpp_coroutines -DRANGES_CXX_COROUTINES=201900 -DRANGES_COROUTINES_HEADER=<coroutine> -DRANGES_COROUTINES_NS=std)
    else()
        message(FATAL_ERROR "Coroutines not supported")
    endif()
endif()

file (GLOB vb_sources CONFIGURE_DEPENDS ${PROJECT_SOURCE_DIR}/libvb/*.cpp)
add_library (vb SHARED ${vb_sources})
link_libraries(vb)

include_directories("${PROJECT_SOURCE_DIR}/include")
target_link_libraries(vb ${CONAN_LIBS})

if (${COV})
	add_compile_options(-O0 --coverage -fprofile-arcs -ftest-coverage)
	add_link_options(--coverage -fprofile-arcs -ftest-coverage)
endif ()

execute_process(COMMAND "git" describe --always --abbrev=40 WORKING_DIRECTORY "${CMAKE_SOURCE_DIR}" OUTPUT_VARIABLE GIT_SHA1 OUTPUT_STRIP_TRAILING_WHITESPACE)
set_source_files_properties(libvb/version.cpp PROPERTIES COMPILE_FLAGS -DGIT_SHA1='"${GIT_SHA1}"')

foreach (dir tests 1D 2D 3D)
    set (CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/${dir})
	file (GLOB src CONFIGURE_DEPENDS ${PROJECT_SOURCE_DIR}/${dir}/*.cpp)
	foreach (f ${src})
		get_filename_component (e ${f} NAME_WE)
		add_executable (${e} ${f})
	endforeach (f)
endforeach (dir)

file (GLOB tests_sources CONFIGURE_DEPENDS ${PROJECT_SOURCE_DIR}/catch2/*.cpp)
set (CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})
add_executable(catch2 ${tests_sources})
