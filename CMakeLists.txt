cmake_minimum_required (VERSION 3.0)
project (Simulations CXX)

set(CONAN_SYSTEM_INCLUDES ON)
include(${CMAKE_BINARY_DIR}/conanbuildinfo.cmake)
conan_basic_setup(KEEP_RPATHS)
unset (CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE)

set (CMAKE_CXX_STANDARD 17)
set (CMAKE_OSX_SYSROOT "${CMAKE_OSX_SYSROOT}/")
set (CMAKE_EXPORT_COMPILE_COMMANDS 1)
add_compile_options(-fdiagnostics-color=always -pedantic -Wall -Wextra -Wpedantic -Wconversion -Wno-unused-function)

include(CheckCXXCompilerFlag)
CHECK_CXX_COMPILER_FLAG(-fcoroutines-ts COROUTINES_TS)
if (${COROUTINES_TS})
	add_compile_options(-fcoroutines-ts)
endif ()

include(CheckIncludeFileCXX)
set (CMAKE_REQUIRED_INCLUDES ${CONAN_INCLUDE_DIRS_TBB}) 
set (CMAKE_REQUIRED_FLAGS "-L${CONAN_LIB_DIRS_TBB}")
set (CMAKE_REQUIRED_LIBRARIES ${CONAN_LIBS_TBB})
cmake_policy(SET CMP0075 NEW)
CHECK_INCLUDE_FILE_CXX(execution EXECUTION)
if (${EXECUTION})
	message("Using native <execution> header")
	add_compile_options(-DEXECUTION)
else()
	message("Using parallel STL from Conan")
endif()

if (${COV})
	add_compile_options(-g -O0 --coverage -fprofile-arcs -ftest-coverage)
	add_link_options(--coverage -fprofile-arcs -ftest-coverage)
else ()
	add_compile_options(-O3 -DNDEBUG)
endif ()
link_directories ("/usr/local/lib" "/opt/X11/lib")
include_directories ("${PROJECT_SOURCE_DIR}/include")

file (GLOB vb_sources ${PROJECT_SOURCE_DIR}/libvb/*.cpp)
add_library (vb SHARED ${vb_sources})
target_link_libraries (vb ${CONAN_LIBS})
link_libraries(vb)

execute_process(COMMAND "git" describe --always --abbrev=40 WORKING_DIRECTORY "${CMAKE_SOURCE_DIR}" OUTPUT_VARIABLE GIT_SHA1 OUTPUT_STRIP_TRAILING_WHITESPACE)
set_source_files_properties(libvb/version.cpp PROPERTIES COMPILE_FLAGS -DGIT_SHA1='"${GIT_SHA1}"')

set (DIRS tests 1D 2D 3D)
if (${PLAYGROUND})
	set (DIRS ${DIRS} playground)
endif ()
foreach (dir ${DIRS})
set (CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/${dir})
	file (GLOB src ${PROJECT_SOURCE_DIR}/${dir}/*.cpp)
	foreach (f ${src})
		get_filename_component (e ${f} NAME_WE)
		add_executable (${e} ${f})
	endforeach (f)
endforeach (dir)

file (GLOB tests_sources ${PROJECT_SOURCE_DIR}/catch2/*.cpp)
set (CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})
add_executable(catch2 ${tests_sources})
