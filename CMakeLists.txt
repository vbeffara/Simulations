cmake_minimum_required (VERSION 3.18)
project (Simulations CXX)

include(CheckCXXCompilerFlag)
include(FindBoost)
include(FindFLTK)
include(FindPkgConfig)

set (CMAKE_CXX_STANDARD 17)
set (CMAKE_EXPORT_COMPILE_COMMANDS 1)

if(NOT CMAKE_BUILD_TYPE)
  message(STATUS "Setting build type to 'Release' as none was specified.")
  set(CMAKE_BUILD_TYPE Release)
endif()

add_compile_options(-pedantic -Wall -Wextra -Wshadow -Wpedantic -Wold-style-cast -Wunused -Wconversion -Wsign-conversion -Wnull-dereference)

if(CMAKE_BUILD_TYPE STREQUAL "Debug")
  message(STATUS "Debug mode")
  add_compile_options(-g)
else()
  message(STATUS "Release mode")
  add_compile_options(-O3 -DNDEBUG)
endif()

find_program(CCACHE ccache)
if(CCACHE)
  message(STATUS "Using ccache")
  set(CMAKE_CXX_COMPILER_LAUNCHER ${CCACHE})
endif()

CHECK_CXX_COMPILER_FLAG(-fcoroutines COROUTINES)
CHECK_CXX_COMPILER_FLAG(-fcoroutines-ts COROUTINES_TS)
if(${COROUTINES_TS})
	add_compile_options(-fcoroutines-ts)
else()
    if(${COROUTINES})
        add_compile_options(-fcoroutines -D__cpp_coroutines -DRANGES_CXX_COROUTINES=201900 -DRANGES_COROUTINES_HEADER=<coroutine> -DRANGES_COROUTINES_NS=std)
    else()
        message(FATAL_ERROR "Coroutines not supported")
    endif()
endif()

find_library(MPC mpc REQUIRED)
find_package(Boost REQUIRED COMPONENTS chrono)
find_package(Microsoft.GSL REQUIRED CONFIG)
find_package(range-v3 REQUIRED)

function(add_pkg)
    foreach(pkg ${ARGV})
        pkg_search_module(${pkg} REQUIRED ${pkg})
        include_directories(SYSTEM ${${pkg}_INCLUDE_DIRS})
        link_directories(${${pkg}_LIBRARY_DIRS})
        link_libraries(${${pkg}_LIBRARIES})
    endforeach()
endfunction()

add_pkg(cairo catch2 docopt eigen3 fftw3 fmt fplll libpng spdlog tbb yaml-cpp)

file (GLOB vb_sources CONFIGURE_DEPENDS ${PROJECT_SOURCE_DIR}/libvb/*.cpp)
add_library (vb SHARED ${vb_sources})
target_link_libraries(vb ${Boost_LIBRARIES} ${MPC})
link_libraries(vb)

if (NOT ${FLTK_FOUND})
    message(FATAL_ERROR "FLTK not found")
endif()

include_directories(SYSTEM ${FLTK_INCLUDE_DIR})
include_directories("${PROJECT_SOURCE_DIR}/include")
target_link_libraries(vb ${FLTK_LIBRARIES})

if (${COV})
	add_compile_options(-g -O0 --coverage -fprofile-arcs -ftest-coverage)
	add_link_options(--coverage -fprofile-arcs -ftest-coverage)
else ()
	add_compile_options(-O3 -DNDEBUG)
endif ()

execute_process(COMMAND "git" describe --always --abbrev=40 WORKING_DIRECTORY "${CMAKE_SOURCE_DIR}" OUTPUT_VARIABLE GIT_SHA1 OUTPUT_STRIP_TRAILING_WHITESPACE)
set_source_files_properties(libvb/version.cpp PROPERTIES COMPILE_FLAGS -DGIT_SHA1='"${GIT_SHA1}"')

foreach (dir tests 1D 2D 3D)
    set (CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/${dir})
	file (GLOB src CONFIGURE_DEPENDS ${PROJECT_SOURCE_DIR}/${dir}/*.cpp)
	foreach (f ${src})
		get_filename_component (e ${f} NAME_WE)
		add_executable (${e} ${f})
	endforeach (f)
endforeach (dir)

file (GLOB tests_sources CONFIGURE_DEPENDS ${PROJECT_SOURCE_DIR}/catch2/*.cpp)
set (CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})
add_executable(catch2 ${tests_sources})
